/*
 * Copyright NetFoundry, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

package main

import (
	"fmt"
	"github.com/spf13/cobra"
	"html/template"
	"os"
	"time"
)

var goBuildInfoTemplate = `// Code generated by ziti-ci. DO NOT EDIT.

package {{.PackageName}}

const (
	Version   = "{{.Version}}"
	Revision  = "{{.Revision}}"
	Branch    = "{{.Branch}}"
	BuildUser = "{{.BuildUser}}"
	BuildDate = "{{.BuildDate}}"
)
`

type GoBuildInfo struct {
	PackageName string
	Version     string
	Revision    string
	Branch      string
	BuildUser   string
	BuildDate   string
}

type goBuildInfoCmd struct {
	baseCommand
}

func (cmd *goBuildInfoCmd) execute() {
	cmd.evalCurrentAndNextVersion()

	tagVersion := fmt.Sprintf("v%v", cmd.nextVersion)

	buildInfo := &GoBuildInfo{
		PackageName: cmd.args[1],
		Version:     tagVersion,
		Revision:    cmd.getCmdOutputOneLine("get git SHA", "git", "rev-parse", "--short=12", "HEAD"),
		Branch:      cmd.getCurrentBranch(),
		BuildUser:   cmd.getUsername(),
		BuildDate:   time.Now().Format("2006-01-02 15:04:05"),
	}

	compiledTemplate, err := template.New("buildInfo").Parse(goBuildInfoTemplate)
	if err != nil {
		cmd.failf("failure compiling build info template %+v\n", err)
	}

	file, err := os.Create(cmd.args[0])
	if err != nil {
		cmd.failf("failure opening build info output file %v. err: %+v\n", cmd.args[0], err)
	}

	err = compiledTemplate.Execute(file, buildInfo)
	if err != nil {
		cmd.failf("failure executing build template to output file %v. err: %+v\n", cmd.args[0], err)
	}

	cmd.runGitCommand("add build info file to git", "add", cmd.args[0])
	cmd.runGitCommand("set git username", "config", "user.name", DefaultGitUsername)
	cmd.runGitCommand("set git password", "config", "user.email", DefaultGitEmail)
	cmd.runGitCommand("commit build info file", "commit", "-m", fmt.Sprintf("Release %v", tagVersion))
}

func newGoBuildInfoCmd(root *rootCommand) *cobra.Command {
	cobraCmd := &cobra.Command{
		Use:   "generate-build-info output-file go-package",
		Short: "Generate build info struct in a go file",
		Args:  cobra.ExactArgs(2),
	}

	result := &goBuildInfoCmd{
		baseCommand: baseCommand{
			rootCommand: root,
			cmd:         cobraCmd,
		},
	}

	return finalize(result)
}
